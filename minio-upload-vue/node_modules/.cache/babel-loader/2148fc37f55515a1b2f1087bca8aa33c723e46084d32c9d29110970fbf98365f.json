{"ast":null,"code":"import SparkMD5 from 'spark-md5';\nconst DEFAULT_SIZE = 20 * 1024 * 1024;\nconst md5 = (file, chunkSize = DEFAULT_SIZE) => {\n  return new Promise((resolve, reject) => {\n    const startMs = new Date().getTime();\n    let blobSlice = File.prototype.slice || File.prototype.mozSlice || File.prototype.webkitSlice;\n    let chunks = Math.ceil(file.size / chunkSize);\n    let currentChunk = 0;\n    let spark = new SparkMD5.ArrayBuffer(); //追加数组缓冲区。\n    let fileReader = new FileReader(); //读取文件\n    fileReader.onload = function (e) {\n      spark.append(e.target.result);\n      currentChunk++;\n      if (currentChunk < chunks) {\n        loadNext();\n      } else {\n        const md5 = spark.end(); //完成md5的计算，返回十六进制结果。\n        console.log('文件md5计算结束，总耗时：', (new Date().getTime() - startMs) / 1000, 's');\n        resolve(md5);\n      }\n    };\n    fileReader.onerror = function (e) {\n      reject(e);\n    };\n    function loadNext() {\n      console.log('当前part number：', currentChunk, '总块数：', chunks);\n      let start = currentChunk * chunkSize;\n      let end = start + chunkSize;\n      end > file.size && (end = file.size);\n      fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\n    }\n    loadNext();\n  });\n};\nexport default md5;","map":{"version":3,"names":["SparkMD5","DEFAULT_SIZE","md5","file","chunkSize","Promise","resolve","reject","startMs","Date","getTime","blobSlice","File","prototype","slice","mozSlice","webkitSlice","chunks","Math","ceil","size","currentChunk","spark","ArrayBuffer","fileReader","FileReader","onload","e","append","target","result","loadNext","end","console","log","onerror","start","readAsArrayBuffer","call"],"sources":["E:/code_java/minio-upload-demo/minio-upload-vue/src/utils/md5.js"],"sourcesContent":["import SparkMD5 from 'spark-md5'\r\nconst DEFAULT_SIZE = 20 * 1024 * 1024\r\nconst md5 = (file, chunkSize = DEFAULT_SIZE) => {\r\n    return new Promise((resolve, reject) => {\r\n        const startMs = new Date().getTime();\r\n        let blobSlice =\r\n            File.prototype.slice ||\r\n            File.prototype.mozSlice ||\r\n            File.prototype.webkitSlice;\r\n        let chunks = Math.ceil(file.size / chunkSize);\r\n        let currentChunk = 0;\r\n        let spark = new SparkMD5.ArrayBuffer(); //追加数组缓冲区。\r\n        let fileReader = new FileReader(); //读取文件\r\n        fileReader.onload = function (e) {\r\n            spark.append(e.target.result);\r\n            currentChunk++;\r\n            if (currentChunk < chunks) {\r\n                loadNext();\r\n            } else {\r\n                const md5 = spark.end(); //完成md5的计算，返回十六进制结果。\r\n                console.log('文件md5计算结束，总耗时：', (new Date().getTime() - startMs) / 1000, 's')\r\n                resolve(md5);\r\n            }\r\n        };\r\n        fileReader.onerror = function (e) {\r\n            reject(e);\r\n        };\r\n\r\n        function loadNext() {\r\n            console.log('当前part number：', currentChunk, '总块数：', chunks);\r\n            let start = currentChunk * chunkSize;\r\n            let end = start + chunkSize;\r\n            (end > file.size) && (end = file.size);\r\n            fileReader.readAsArrayBuffer(blobSlice.call(file, start, end));\r\n        }\r\n        loadNext();\r\n    });\r\n}\r\n\r\nexport default md5\r\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,WAAW;AAChC,MAAMC,YAAY,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI;AACrC,MAAMC,GAAG,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAGH,YAAY,KAAK;EAC5C,OAAO,IAAII,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC;IACpC,IAAIC,SAAS,GACTC,IAAI,CAACC,SAAS,CAACC,KAAK,IACpBF,IAAI,CAACC,SAAS,CAACE,QAAQ,IACvBH,IAAI,CAACC,SAAS,CAACG,WAAW;IAC9B,IAAIC,MAAM,GAAGC,IAAI,CAACC,IAAI,CAAChB,IAAI,CAACiB,IAAI,GAAGhB,SAAS,CAAC;IAC7C,IAAIiB,YAAY,GAAG,CAAC;IACpB,IAAIC,KAAK,GAAG,IAAItB,QAAQ,CAACuB,WAAW,CAAC,CAAC,CAAC,CAAC;IACxC,IAAIC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC,CAAC,CAAC;IACnCD,UAAU,CAACE,MAAM,GAAG,UAAUC,CAAC,EAAE;MAC7BL,KAAK,CAACM,MAAM,CAACD,CAAC,CAACE,MAAM,CAACC,MAAM,CAAC;MAC7BT,YAAY,EAAE;MACd,IAAIA,YAAY,GAAGJ,MAAM,EAAE;QACvBc,QAAQ,CAAC,CAAC;MACd,CAAC,MAAM;QACH,MAAM7B,GAAG,GAAGoB,KAAK,CAACU,GAAG,CAAC,CAAC,CAAC,CAAC;QACzBC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE,CAAC,IAAIzB,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,GAAGF,OAAO,IAAI,IAAI,EAAE,GAAG,CAAC;QAC3EF,OAAO,CAACJ,GAAG,CAAC;MAChB;IACJ,CAAC;IACDsB,UAAU,CAACW,OAAO,GAAG,UAAUR,CAAC,EAAE;MAC9BpB,MAAM,CAACoB,CAAC,CAAC;IACb,CAAC;IAED,SAASI,QAAQA,CAAA,EAAG;MAChBE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEb,YAAY,EAAE,MAAM,EAAEJ,MAAM,CAAC;MAC3D,IAAImB,KAAK,GAAGf,YAAY,GAAGjB,SAAS;MACpC,IAAI4B,GAAG,GAAGI,KAAK,GAAGhC,SAAS;MAC1B4B,GAAG,GAAG7B,IAAI,CAACiB,IAAI,KAAMY,GAAG,GAAG7B,IAAI,CAACiB,IAAI,CAAC;MACtCI,UAAU,CAACa,iBAAiB,CAAC1B,SAAS,CAAC2B,IAAI,CAACnC,IAAI,EAAEiC,KAAK,EAAEJ,GAAG,CAAC,CAAC;IAClE;IACAD,QAAQ,CAAC,CAAC;EACd,CAAC,CAAC;AACN,CAAC;AAED,eAAe7B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}