{"ast":null,"code":"import md5 from '../utils/md5';\nimport { initTask,\n// getPresignedObjectUrl,\ngetTaskInfo, getPresignedObjectUrl\n// merge\n} from '../api/upload';\n// import { Notification } from 'element-ui';\n// import _axios from '@/utils/_axios';\nimport axios from 'axios';\nexport default {\n  methods: {\n    async handleHttpRequest(options) {\n      // 查询文件有无对应上传任务\n      const file = options.file;\n      const identifier = await md5(file);\n      const {\n        data\n      } = await getTaskInfo(identifier);\n      let task = data.data;\n\n      // 没有任务则新建任务\n      if (!task) {\n        const {\n          data\n        } = await initTask(identifier, file.size, 5 * 1024 * 1024, file.name);\n        if (data.data) {\n          task = data.data;\n        } else {\n          this.$notify.error({\n            title: \"错误\",\n            message: \"创建上传任务失败！\"\n          });\n        }\n      }\n      console.log(task);\n      // 处理上传\n      if (task) {\n        // 若上传任务存在且已经完成，直接返回\n        const {\n          finished,\n          fileUrl,\n          fileIdentifier,\n          chunkNum,\n          chunkSize\n        } = task;\n        if (finished) {\n          return fileUrl;\n        }\n        for (let partNum = 1; partNum <= chunkNum; partNum++) {\n          // 预上传地址\n          const {\n            data\n          } = await getPresignedObjectUrl(fileIdentifier, partNum);\n          const presignedUrl = data.data;\n          // 切片\n          const start = new Number(chunkSize) * (partNum - 1);\n          const end = start + new Number(chunkSize);\n          const blob = file.slice(start, end);\n          if (presignedUrl) {\n            try {\n              await axios.request({\n                url: presignedUrl,\n                method: 'PUT',\n                data: blob,\n                headers: {\n                  'Content-Type': 'application/octet-stream'\n                }\n              });\n            } catch (error) {\n              this.$notify.error({\n                message: `上传分片出错，分片编号:${partNum}`\n              });\n            }\n          } else {\n            this.$notify.error({\n              message: \"获取上传地址出错\"\n            });\n          }\n        }\n      } else {\n        this.$notify.error({\n          title: \"错误\",\n          message: \"文件上传错误\"\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["md5","initTask","getTaskInfo","getPresignedObjectUrl","axios","methods","handleHttpRequest","options","file","identifier","data","task","size","name","$notify","error","title","message","console","log","finished","fileUrl","fileIdentifier","chunkNum","chunkSize","partNum","presignedUrl","start","Number","end","blob","slice","request","url","method","headers"],"sources":["src/views/UploadView.vue"],"sourcesContent":["<template>\r\n    <div>\r\n        <el-upload class=\"upload-demo\" drag action=\"https://jsonplaceholder.typicode.com/posts/\" multiple\r\n            :http-request=handleHttpRequest>\r\n            <i class=\"el-icon-upload\"></i>\r\n            <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\r\n        </el-upload>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport md5 from '../utils/md5';\r\nimport {\r\n    initTask,\r\n    // getPresignedObjectUrl,\r\n    getTaskInfo,\r\n    getPresignedObjectUrl,\r\n    // merge\r\n} from '../api/upload';\r\n// import { Notification } from 'element-ui';\r\n// import _axios from '@/utils/_axios';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    methods: {\r\n        async handleHttpRequest(options) {\r\n            // 查询文件有无对应上传任务\r\n            const file = options.file;\r\n            const identifier = await md5(file);\r\n            const { data } = await getTaskInfo(identifier);\r\n            let task = data.data;\r\n\r\n            // 没有任务则新建任务\r\n            if (!task) {\r\n                const { data } = await initTask(identifier, file.size, 5 * 1024 * 1024, file.name);\r\n                if (data.data) {\r\n                    task = data.data;\r\n                } else {\r\n                    this.$notify.error({\r\n                        title: \"错误\",\r\n                        message: \"创建上传任务失败！\"\r\n                    });\r\n                }\r\n            }\r\n            console.log(task);\r\n            // 处理上传\r\n            if (task) {\r\n                // 若上传任务存在且已经完成，直接返回\r\n                const { finished, fileUrl, fileIdentifier, chunkNum, chunkSize } = task;\r\n                if (finished) {\r\n                    return fileUrl;\r\n                }\r\n                for (let partNum = 1; partNum <= chunkNum; partNum++) {\r\n                    // 预上传地址\r\n                    const { data } = await getPresignedObjectUrl(fileIdentifier, partNum);\r\n                    const presignedUrl = data.data;\r\n                    // 切片\r\n                    const start = new Number(chunkSize) * (partNum - 1)\r\n                    const end = start + new Number(chunkSize)\r\n                    const blob = file.slice(start, end)\r\n                    if (presignedUrl) {\r\n                        try {\r\n                            await axios.request(\r\n                                {\r\n                                    url: presignedUrl,\r\n                                    method: 'PUT',\r\n                                    data: blob,\r\n                                    headers: { 'Content-Type': 'application/octet-stream' }\r\n                                }\r\n                            )\r\n                        } catch (error) {\r\n                            this.$notify.error({\r\n                                message: `上传分片出错，分片编号:${partNum}`\r\n                            })\r\n                        }\r\n                    } else {\r\n                        this.$notify.error({\r\n                            message: \"获取上传地址出错\"\r\n                        })\r\n                    }\r\n                }\r\n\r\n\r\n            } else {\r\n                this.$notify.error({\r\n                    title: \"错误\",\r\n                    message: \"文件上传错误\"\r\n                });\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped></style>"],"mappings":"AAWA,OAAAA,GAAA;AACA,SACAC,QAAA;AACA;AACAC,WAAA,EACAC;AACA;AAAA,OACA;AACA;AACA;AACA,OAAAC,KAAA;AAEA;EACAC,OAAA;IACA,MAAAC,kBAAAC,OAAA;MACA;MACA,MAAAC,IAAA,GAAAD,OAAA,CAAAC,IAAA;MACA,MAAAC,UAAA,SAAAT,GAAA,CAAAQ,IAAA;MACA;QAAAE;MAAA,UAAAR,WAAA,CAAAO,UAAA;MACA,IAAAE,IAAA,GAAAD,IAAA,CAAAA,IAAA;;MAEA;MACA,KAAAC,IAAA;QACA;UAAAD;QAAA,UAAAT,QAAA,CAAAQ,UAAA,EAAAD,IAAA,CAAAI,IAAA,mBAAAJ,IAAA,CAAAK,IAAA;QACA,IAAAH,IAAA,CAAAA,IAAA;UACAC,IAAA,GAAAD,IAAA,CAAAA,IAAA;QACA;UACA,KAAAI,OAAA,CAAAC,KAAA;YACAC,KAAA;YACAC,OAAA;UACA;QACA;MACA;MACAC,OAAA,CAAAC,GAAA,CAAAR,IAAA;MACA;MACA,IAAAA,IAAA;QACA;QACA;UAAAS,QAAA;UAAAC,OAAA;UAAAC,cAAA;UAAAC,QAAA;UAAAC;QAAA,IAAAb,IAAA;QACA,IAAAS,QAAA;UACA,OAAAC,OAAA;QACA;QACA,SAAAI,OAAA,MAAAA,OAAA,IAAAF,QAAA,EAAAE,OAAA;UACA;UACA;YAAAf;UAAA,UAAAP,qBAAA,CAAAmB,cAAA,EAAAG,OAAA;UACA,MAAAC,YAAA,GAAAhB,IAAA,CAAAA,IAAA;UACA;UACA,MAAAiB,KAAA,OAAAC,MAAA,CAAAJ,SAAA,KAAAC,OAAA;UACA,MAAAI,GAAA,GAAAF,KAAA,OAAAC,MAAA,CAAAJ,SAAA;UACA,MAAAM,IAAA,GAAAtB,IAAA,CAAAuB,KAAA,CAAAJ,KAAA,EAAAE,GAAA;UACA,IAAAH,YAAA;YACA;cACA,MAAAtB,KAAA,CAAA4B,OAAA,CACA;gBACAC,GAAA,EAAAP,YAAA;gBACAQ,MAAA;gBACAxB,IAAA,EAAAoB,IAAA;gBACAK,OAAA;kBAAA;gBAAA;cACA,CACA;YACA,SAAApB,KAAA;cACA,KAAAD,OAAA,CAAAC,KAAA;gBACAE,OAAA,iBAAAQ,OAAA;cACA;YACA;UACA;YACA,KAAAX,OAAA,CAAAC,KAAA;cACAE,OAAA;YACA;UACA;QACA;MAGA;QACA,KAAAH,OAAA,CAAAC,KAAA;UACAC,KAAA;UACAC,OAAA;QACA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}