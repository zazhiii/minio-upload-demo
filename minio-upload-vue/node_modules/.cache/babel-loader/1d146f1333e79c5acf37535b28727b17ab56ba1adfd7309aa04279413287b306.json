{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.find.js\";\nimport md5 from '../utils/md5';\nimport { initTask, getTaskInfo, getPresignedObjectUrl, merge } from '../api/upload';\nimport axios from 'axios';\nexport default {\n  methods: {\n    async handleHttpRequest(options) {\n      // 查询文件有无对应上传任务\n      const file = options.file;\n      const identifier = await md5(file);\n      const {\n        data\n      } = await getTaskInfo(identifier);\n      let task = data.data;\n\n      // 没有任务则新建任务\n      if (!task) {\n        const {\n          data\n        } = await initTask(identifier, file.size, 5 * 1024 * 1024, file.name);\n        if (data.data) {\n          task = data.data;\n        } else {\n          this.$message.error('创建上传任务失败');\n        }\n      }\n      // console.log(task);\n      // 处理上传\n      if (task) {\n        // 若上传任务存在且已经完成，直接返回\n        const {\n          finished,\n          fileUrl,\n          fileIdentifier,\n          chunkNum,\n          chunkSize,\n          parts\n        } = task;\n        if (finished) {\n          this.$message.success('上传完成');\n          return fileUrl;\n        }\n        // 上传每一个分片\n        for (let partNum = 1; partNum <= chunkNum; partNum++) {\n          console.log(`正在上传分片：${partNum}/${chunkNum}`);\n          // 若分片已上传，则跳过\n          const part = parts.find(part => part.partNumber === partNum);\n          if (part) {\n            continue;\n          }\n          // TODO: 上传完分片更新进度\n          // 预上传地址\n          const {\n            data\n          } = await getPresignedObjectUrl(fileIdentifier, partNum);\n          const presignedUrl = data.data;\n          // 切片\n          const start = new Number(chunkSize) * (partNum - 1);\n          const end = start + new Number(chunkSize);\n          const blob = file.slice(start, end);\n          if (presignedUrl) {\n            try {\n              await axios.request({\n                url: presignedUrl,\n                method: 'PUT',\n                data: blob,\n                headers: {\n                  'Content-Type': 'application/octet-stream'\n                }\n              });\n            } catch (error) {\n              this.$message.error(`上传分片出错，分片编号:${partNum}`);\n            }\n          } else {\n            this.$message.error(\"获取上传地址出错\");\n          }\n        }\n      } else {\n        this.$message.error(\"文件上传错误\");\n      }\n      try {\n        await merge(identifier);\n        this.$message.success('上传完成');\n      } catch (error) {\n        this.$message.error(\"合并文件分片出错\");\n      }\n    }\n  }\n};","map":{"version":3,"names":["md5","initTask","getTaskInfo","getPresignedObjectUrl","merge","axios","methods","handleHttpRequest","options","file","identifier","data","task","size","name","$message","error","finished","fileUrl","fileIdentifier","chunkNum","chunkSize","parts","success","partNum","console","log","part","find","partNumber","presignedUrl","start","Number","end","blob","slice","request","url","method","headers"],"sources":["src/views/UploadView.vue"],"sourcesContent":["<template>\r\n    <div class=\"app\">\r\n        <el-upload class=\"upload-demo\" drag action=\"https://jsonplaceholder.typicode.com/posts/\" multiple\r\n            :http-request=handleHttpRequest>\r\n            <i class=\"el-icon-upload\"></i>\r\n            <div class=\"el-upload__text\">将文件拖到此处，或<em>点击上传</em></div>\r\n        </el-upload>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport md5 from '../utils/md5';\r\nimport {\r\n    initTask,\r\n    getTaskInfo,\r\n    getPresignedObjectUrl,\r\n    merge,\r\n} from '../api/upload';\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n    methods: {\r\n        async handleHttpRequest(options) {\r\n            // 查询文件有无对应上传任务\r\n            const file = options.file;\r\n            const identifier = await md5(file);\r\n            const { data } = await getTaskInfo(identifier);\r\n            let task = data.data;\r\n\r\n            // 没有任务则新建任务\r\n            if (!task) {\r\n                const { data } = await initTask(identifier, file.size, 5 * 1024 * 1024, file.name);\r\n                if (data.data) {\r\n                    task = data.data;\r\n                } else {\r\n                    this.$message.error('创建上传任务失败');\r\n                }\r\n            }\r\n            // console.log(task);\r\n            // 处理上传\r\n            if (task) {\r\n                // 若上传任务存在且已经完成，直接返回\r\n                const { finished, fileUrl, fileIdentifier, chunkNum, chunkSize, parts} = task;\r\n                if (finished) {\r\n                    this.$message.success('上传完成')\r\n                    return fileUrl\r\n                }\r\n                // 上传每一个分片\r\n                for (let partNum = 1; partNum <= chunkNum; partNum++) {\r\n                    console.log(`正在上传分片：${partNum}/${chunkNum}`);\r\n                    // 若分片已上传，则跳过\r\n                    const part = parts.find(part => part.partNumber === partNum);\r\n                    if (part) {\r\n                        continue;\r\n                    }\r\n                    // TODO: 上传完分片更新进度\r\n                    // 预上传地址\r\n                    const { data } = await getPresignedObjectUrl(fileIdentifier, partNum);\r\n                    const presignedUrl = data.data;\r\n                    // 切片\r\n                    const start = new Number(chunkSize) * (partNum - 1)\r\n                    const end = start + new Number(chunkSize)\r\n                    const blob = file.slice(start, end)\r\n                    if (presignedUrl) {\r\n                        try {\r\n                            await axios.request(\r\n                                {\r\n                                    url: presignedUrl,\r\n                                    method: 'PUT',\r\n                                    data: blob,\r\n                                    headers: { 'Content-Type': 'application/octet-stream' }\r\n                                }\r\n                            )\r\n                        } catch (error) {\r\n                            this.$message.error(`上传分片出错，分片编号:${partNum}`)\r\n                        }\r\n                    } else {\r\n                        this.$message.error(\"获取上传地址出错\")\r\n                    }\r\n                }\r\n            } else {\r\n                this.$message.error(\"文件上传错误\")\r\n            }\r\n\r\n            try {\r\n                await merge(identifier)\r\n                this.$message.success('上传完成')\r\n            } catch (error) {\r\n                this.$message.error(\"合并文件分片出错\")\r\n            }\r\n        }\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.app {\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n}\r\n\r\n</style>"],"mappings":";;AAWA,OAAAA,GAAA;AACA,SACAC,QAAA,EACAC,WAAA,EACAC,qBAAA,EACAC,KAAA,QACA;AACA,OAAAC,KAAA;AAEA;EACAC,OAAA;IACA,MAAAC,kBAAAC,OAAA;MACA;MACA,MAAAC,IAAA,GAAAD,OAAA,CAAAC,IAAA;MACA,MAAAC,UAAA,SAAAV,GAAA,CAAAS,IAAA;MACA;QAAAE;MAAA,UAAAT,WAAA,CAAAQ,UAAA;MACA,IAAAE,IAAA,GAAAD,IAAA,CAAAA,IAAA;;MAEA;MACA,KAAAC,IAAA;QACA;UAAAD;QAAA,UAAAV,QAAA,CAAAS,UAAA,EAAAD,IAAA,CAAAI,IAAA,mBAAAJ,IAAA,CAAAK,IAAA;QACA,IAAAH,IAAA,CAAAA,IAAA;UACAC,IAAA,GAAAD,IAAA,CAAAA,IAAA;QACA;UACA,KAAAI,QAAA,CAAAC,KAAA;QACA;MACA;MACA;MACA;MACA,IAAAJ,IAAA;QACA;QACA;UAAAK,QAAA;UAAAC,OAAA;UAAAC,cAAA;UAAAC,QAAA;UAAAC,SAAA;UAAAC;QAAA,IAAAV,IAAA;QACA,IAAAK,QAAA;UACA,KAAAF,QAAA,CAAAQ,OAAA;UACA,OAAAL,OAAA;QACA;QACA;QACA,SAAAM,OAAA,MAAAA,OAAA,IAAAJ,QAAA,EAAAI,OAAA;UACAC,OAAA,CAAAC,GAAA,WAAAF,OAAA,IAAAJ,QAAA;UACA;UACA,MAAAO,IAAA,GAAAL,KAAA,CAAAM,IAAA,CAAAD,IAAA,IAAAA,IAAA,CAAAE,UAAA,KAAAL,OAAA;UACA,IAAAG,IAAA;YACA;UACA;UACA;UACA;UACA;YAAAhB;UAAA,UAAAR,qBAAA,CAAAgB,cAAA,EAAAK,OAAA;UACA,MAAAM,YAAA,GAAAnB,IAAA,CAAAA,IAAA;UACA;UACA,MAAAoB,KAAA,OAAAC,MAAA,CAAAX,SAAA,KAAAG,OAAA;UACA,MAAAS,GAAA,GAAAF,KAAA,OAAAC,MAAA,CAAAX,SAAA;UACA,MAAAa,IAAA,GAAAzB,IAAA,CAAA0B,KAAA,CAAAJ,KAAA,EAAAE,GAAA;UACA,IAAAH,YAAA;YACA;cACA,MAAAzB,KAAA,CAAA+B,OAAA,CACA;gBACAC,GAAA,EAAAP,YAAA;gBACAQ,MAAA;gBACA3B,IAAA,EAAAuB,IAAA;gBACAK,OAAA;kBAAA;gBAAA;cACA,CACA;YACA,SAAAvB,KAAA;cACA,KAAAD,QAAA,CAAAC,KAAA,gBAAAQ,OAAA;YACA;UACA;YACA,KAAAT,QAAA,CAAAC,KAAA;UACA;QACA;MACA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;MAEA;QACA,MAAAZ,KAAA,CAAAM,UAAA;QACA,KAAAK,QAAA,CAAAQ,OAAA;MACA,SAAAP,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}